# 백준 17198번

# 입력
# 10x10 크기의 농장을 나타내는 맵이 주어집니다.
# 'B'는 헛간 위치,
# 'L'은 호수 위치,
# 'R'은 바위 위치,
# '.'은 나이트가 이동할 수 있는 빈 공간을 나타냅니다.

# 출력
# 헛간 'B'에서 호수 'L'까지 이동하는 최소 이동 횟수를 출력

# 로직
# 1. 입력된 10x10 맵에서 헛간 'B'의 위치를 찾아 BFS를 시작합니다.
# 2. BFS를 통해 상, 하, 좌, 우로 이동하며 바위 'R'을 피하면서 이동 경로를 탐색합니다.
# 3. BFS 탐색 중 호수 'L'에 도달하면 그때까지의 이동 횟수를 반환합니다.
# 4. 각 칸에 도달할 때마다 이동 횟수를 기록하고, 탐색이 완료되면 최종 이동 횟수를 출력합니다.

from collections import deque  # BFS 탐색에 사용할 deque 모듈 임포트

# BFS 함수 정의
def bfs(y, x):
    q = deque()  # 탐색할 좌표를 저장할 큐 선언
    q.append((y, x))  # 시작 좌표 (y, x)를 큐에 넣음
    graph[y][x] = 0  # 시작 좌표는 방문한 것으로 처리 (거리 0으로 설정)
    
    # 큐가 빌 때까지 반복
    while q:
        y, x = q.popleft()  # 큐에서 좌표를 하나 꺼냄
        
        # 네 방향으로 이동 (상, 하, 좌, 우)
        for dy, dx in d:
            Y, X = y + dy, x + dx  # 새로운 좌표 계산
            
            # 새 좌표가 10x10 범위 내에 있는지 확인
            if (0 <= Y < 10) and (0 <= X < 10):
                
                # 목표 지점 'L'에 도달하면 현재까지의 이동 거리 반환
                if graph[Y][X] == 'L':
                    return graph[y][x]
                
                # 이동할 수 있는 빈 공간 '.'이면 탐색 진행
                if graph[Y][X] == '.':
                    q.append((Y, X))  # 새로운 좌표를 큐에 추가
                    graph[Y][X] = graph[y][x] + 1  # 이전 좌표에서의 이동 횟수를 1 증가시킴

# 입력 처리: 10x10 크기의 체스판 입력받기
graph = [list(input()) for _ in range(10)]

# 상하좌우 네 방향으로 이동할 때 사용할 좌표 변화 리스트
d = [(-1, 0), (1, 0), (0, -1), (0, 1)]

# 체스판에서 시작 지점 'B'를 찾기 위한 이중 for문
for i in range(10):
    for j in range(10):
        # 시작 지점 'B'를 찾으면 BFS 시작
        if graph[i][j] == 'B':
            cnt = bfs(i, j)  # BFS로 최소 이동 횟수 계산

# 최종 결과 출력 (나이트가 'B'에서 'L'까지 이동하는 최소 횟수)
print(cnt)

# 34088KB, 48ms