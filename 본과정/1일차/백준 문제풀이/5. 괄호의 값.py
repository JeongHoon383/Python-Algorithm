# 문제 분석
# 1. 입력받은 문자열 순회
# 2. 올바른 괄호열을 구한다.
# 3. 올바른 괄호열의 값을 계산한다.
# 4. 올바르지 않은 괄호열은 0을 출력하고 올바른 괄호열은 계산한 값을 출력한다.

# 올바른 괄호란?
# 1. 한 쌍의 괄호로만 이루어짐
# 2. X가 올바른 괄호열이면 '(X)'이나 '[X]'도 모두 올바른 괄호열이 된다.
# 3. X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.

# 로직
# 1. 괄호열 입력 받음
# 2. 열린 괄호(소괄호, 대괄호)일 경우 스택에 추가하고 소괄호는 2로 곱셈, 대괄호는 3을 곱셈하는 tmp 변수에 담아준다
# 3. 닫힌 괄호일때 스택이 비어있거나 마지막이 닫힌괄호 또는 다른 괄호(소괄호일 경우 대괄호만 남는)일 경우 0을 출력
# 4. 괄호 쌍이 맞으면 최종 결과값에 tmp를 더해주기
# 5. 최종 결과값 출력

# 입력
# 1. 괄호열을 나타내는 문자열이 주어짐(길이 1이상, 30이하)

arr = input()  # 괄호 문자열 입력 받기
stack = []  # 괄호를 저장할 스택
answer = 0  # 최종 결과값
tmp = 1  # 중간 계산을 위한 변수 (곱셈 기반 계산)

for i in range(len(arr)):  # 입력 문자열의 각 문자를 순차적으로 탐색
    if arr[i] == '(':  # 열린 소괄호일 경우
        stack.append(arr[i])  # 스택에 추가
        tmp *= 2  # 소괄호는 2로 곱셈
    elif arr[i] == '[':  # 열린 대괄호일 경우
        stack.append(arr[i])  # 스택에 추가
        tmp *= 3  # 대괄호는 3으로 곱셈
    elif arr[i] == ")":  # 닫힌 소괄호일 경우
        if not stack or stack[-1] == "[":  # 스택이 비어있거나 스택의 마지막이 대괄호면 잘못된 괄호 구조
            answer = 0  # 실패한 구조
            break
        if arr[i - 1] == "(":  # 바로 앞에 열린 소괄호가 있으면
            answer += tmp  # tmp 값을 더해줌 (올바른 괄호쌍을 찾음)
        stack.pop()  # 스택에서 마지막 열린 괄호 제거
        tmp //= 2  # 소괄호에 해당하는 값을 제거 (초기화)
    else:  # 닫힌 대괄호일 경우
        if not stack or stack[-1] == "(":  # 스택이 비어있거나 스택의 마지막이 소괄호면 잘못된 괄호 구조
            answer = 0  # 실패한 구조
            break
        if arr[i - 1] == '[':  # 바로 앞에 열린 대괄호가 있으면
            answer += tmp  # tmp 값을 더해줌 (올바른 괄호쌍을 찾음)
        stack.pop()  # 스택에서 마지막 열린 괄호 제거
        tmp //= 3  # 대괄호에 해당하는 값을 제거 (초기화)

if stack:  # 모든 괄호를 처리한 후 스택이 비어있지 않으면 잘못된 구조
    print(0)  # 실패한 구조
else:
    print(answer)  # 올바르게 처리된 경우 결과 출력

